theme(panel.grid.major = element_line(colour="grey95"),
panel.grid.minor = element_blank())+
theme(panel.background = element_rect(fill = 'white', colour = 'grey70'))+
theme(legend.position="bottom")+
ggtitle(paste0(dataName, ", n=", n))
pp[[3]]=gg
ggsave("../../Figure/corr_data_MSE_CPAC200.pdf",
plot=gg+theme(text=element_text(size=10,family="Times")),
# plot=gg+theme(text=element_text(size=10,family="CM Roman")),
width=5.5,height=2.5)
source("function_collection.R")
library(gridExtra)
library(grid)
grid_arrange_shared_legend2(list(pp[[1]], pp[[2]], pp[[3]]), 3, 1)
rm(list = ls())
setwd("/Users/Runze/Documents/GitHub/Dissertation/Code/R")
dataNameVec = c("JHU", "desikan", "CPAC200")
dataNameDisplayVec = c("JHU", "Desikan", "CPAC200")
isSVD <- 0
source("function_collection.R")
require(ggplot2)
df <- list()
df_LR <- list()
pp <- list()
for (iData in 1:length(dataNameVec)) {
dataName = dataNameVec[iData]
tmpList = read_data(dataName, DA=F, newGraph=F)
A_all = tmpList[[1]]
n = tmpList[[2]]
M = tmpList[[3]]
rm(tmpList)
Abar = add(A_all)/M
AbarDiagAug = diag_aug(Abar)
eigenResult = eigen(AbarDiagAug)$values^2
eigenResult = 1 - cumsum(sort(abs(eigenResult), decreasing = T))/sum(abs(eigenResult))
df[[iData]] <- data.frame(re = c(eigenResult), d = 1:n,
which = "raw data",
dataname = dataNameDisplayVec[[iData]])
source("getElbows.R")
nElb = 3
dMax = ceiling(n*3/5)
evalVec = ase(Abar, dMax, isSVD)[[1]]
dHat = getElbows(evalVec, n=nElb, plot=F)[[nElb]]
A.ase = ase(diag_aug(Abar), dHat, isSVD)
if (dHat == 1) {
Ahat = A.ase[[1]] * A.ase[[3]] %*% t(A.ase[[2]])
} else {
Ahat <- A.ase[[3]][,1:dHat] %*% diag(A.ase[[1]][1:dHat]) %*% t(A.ase[[2]][,1:dHat])
}
eigenResult = eigen(Ahat)$values^2
eigenResult = 1 - cumsum(sort(abs(eigenResult), decreasing = T))/sum(abs(eigenResult))
df_LR[[iData]] <- data.frame(re = c(eigenResult), d = 1:n,
which = "low-rank data",
dataname = dataNameDisplayVec[[iData]])
error_by_dim_df <- rbind(df[[iData]], df_LR[[iData]])
label_y <- with(error_by_dim_df, .75*max(re)+.25*min(re))
pp[[iData]] <- ggplot(error_by_dim_df,aes(x=d,y=re,linetype=factor(which)))+
# facet_wrap(~dataname, nrow=1)+
scale_linetype_manual(name="",values=c(1, 2))+
geom_line()+
xlab("dimension d")+ylab("relative error")+
theme(panel.grid.major = element_line(colour="grey95"),
panel.grid.minor = element_blank())+
theme(panel.background = element_rect(fill = 'white', colour = 'grey70'))+
# theme(legend.position="bottom")
theme(legend.position="none")+
ggtitle(dataNameDisplayVec[[iData]])
}
library(gridExtra)
library(grid)
pdf(paste0("../../Figure/screeplot_ratio_all.pdf"), onefile=FALSE, family="Times", width=6, height=2.5)
pp_all <- grid_arrange_shared_legend2(list(pp[[1]], pp[[2]], pp[[3]]), 1, 3)
dev.off()
rm(list = ls())
setwd("/Users/Runze/Documents/GitHub/Dissertation/Code/R")
dataNameVec = c("JHU", "desikan", "CPAC200")
dataNameDisplayVec = c("JHU", "Desikan", "CPAC200")
isSVD <- 0
source("function_collection.R")
require(ggplot2)
df <- list()
df_LR <- list()
pp <- list()
for (iData in 1:length(dataNameVec)) {
dataName = dataNameVec[iData]
tmpList = read_data(dataName, DA=F, newGraph=F)
A_all = tmpList[[1]]
n = tmpList[[2]]
M = tmpList[[3]]
rm(tmpList)
Abar = add(A_all)/M
AbarDiagAug = diag_aug(Abar)
eigenResult = eigen(AbarDiagAug)$values^2
eigenResult = 1 - cumsum(sort(abs(eigenResult), decreasing = T))/sum(abs(eigenResult))
df[[iData]] <- data.frame(re = c(eigenResult), d = 1:n,
which = "raw data",
dataname = dataNameDisplayVec[[iData]])
source("getElbows.R")
nElb = 3
dMax = ceiling(n*3/5)
evalVec = ase(Abar, dMax, isSVD)[[1]]
dHat = getElbows(evalVec, n=nElb, plot=F)[[nElb]]
A.ase = ase(diag_aug(Abar), dHat, isSVD)
if (dHat == 1) {
Ahat = A.ase[[1]] * A.ase[[3]] %*% t(A.ase[[2]])
} else {
Ahat <- A.ase[[3]][,1:dHat] %*% diag(A.ase[[1]][1:dHat]) %*% t(A.ase[[2]][,1:dHat])
}
eigenResult = eigen(Ahat)$values^2
eigenResult = 1 - cumsum(sort(abs(eigenResult), decreasing = T))/sum(abs(eigenResult))
df_LR[[iData]] <- data.frame(re = c(eigenResult), d = 1:n,
which = "low-rank data",
dataname = dataNameDisplayVec[[iData]])
error_by_dim_df <- rbind(df[[iData]], df_LR[[iData]])
label_y <- with(error_by_dim_df, .75*max(re)+.25*min(re))
pp[[iData]] <- ggplot(error_by_dim_df,aes(x=d,y=re,linetype=factor(which)))+
# facet_wrap(~dataname, nrow=1)+
scale_linetype_manual(name="",values=c(1, 2))+
geom_line()+
xlab("dimension d")+ylab("relative error")+
theme(panel.grid.major = element_line(colour="grey95"),
panel.grid.minor = element_blank())+
theme(panel.background = element_rect(fill = 'white', colour = 'grey70'))+
# theme(legend.position="bottom")
theme(legend.position="none")+
ggtitle(dataNameDisplayVec[[iData]])
}
library(gridExtra)
library(grid)
pdf(paste0("../../Figure/screeplot_ratio_all.pdf"), onefile=FALSE, family="Times", width=6, height=2.5)
pp_all <- grid_arrange_shared_legend2(list(pp[[1]], pp[[2]], pp[[3]]), 1, 3)
dev.off()
rm(list = ls())
setwd("/Users/Runze/Documents/GitHub/Dissertation/Code/R")
dataName = "desikan"
source("function_collection.R")
require(ggplot2)
tmpList = read_data(dataName, DA=F, newGraph=F)
A_all = tmpList[[1]]
n = tmpList[[2]]
M = tmpList[[3]]
rm(tmpList)
P = add(A_all)/M
diag(P) = NA
pVec = c(P)
pVec = pVec[!is.na(pVec)]
pVec
# hist(pVec)
(sum(pVec == 0))/n/(n-1)
(sum(pVec == 1))/n/(n-1)
df <- data.frame(p=pVec)
# label_y <- with(df, .75*yMax+.25*yMin)
gg <- ggplot(df,aes(x=p))+
geom_histogram()+
xlab("P") + ylab("count")+
theme(panel.grid.major = element_line(colour="grey95"),
panel.grid.minor = element_blank())+
theme(panel.background = element_rect(fill = 'white', colour = 'grey70'))+
theme(legend.position="none")+
ggtitle("Histogram of P for Desikan")
gg
rm(list = ls())
setwd("/Users/Runze/Documents/GitHub/Dissertation/Code/R")
dataName = "desikan"
source("function_collection.R")
require(ggplot2)
tmpList = read_data(dataName, DA=F, newGraph=F)
A_all = tmpList[[1]]
n = tmpList[[2]]
M = tmpList[[3]]
rm(tmpList)
P = add(A_all)/M
diag(P) = NA
pVec = c(P)
pVec = pVec[!is.na(pVec)]
pVec
# hist(pVec)
(sum(pVec == 0))/n/(n-1)
(sum(pVec == 1))/n/(n-1)
df <- data.frame(p=pVec)
# label_y <- with(df, .75*yMax+.25*yMin)
gg <- ggplot(df,aes(x=p))+
geom_histogram()+
xlab("P") + ylab("count")+
theme(panel.grid.major = element_line(colour="grey95"),
panel.grid.minor = element_blank())+
theme(panel.background = element_rect(fill = 'white', colour = 'grey70'))+
theme(legend.position="none")+
ggtitle("Histogram of P for Desikan")
ggsave("../../Figure/P_hist_desikan.pdf",
plot=gg+theme(text=element_text(size=10,family="Times")),
width=4.5,height=3.5)
rm(list = ls())
setwd("/Users/Runze/Documents/GitHub/Dissertation/Code/R")
# dataName = "CPAC200"
# dataName = "desikan"
# dataName = "JHU"
dataNameVec = c("JHU", "desikan", "CPAC200")
dataNameDisplayVec = c("JHU", "Desikan", "CPAC200")
source("function_collection.R")
require(ggplot2)
eigenResult <- list()
pp_hist <- list()
for (iData in 1:length(dataNameVec)) {
dataName = dataNameVec[iData]
tmpList = read_data(dataName, DA=F, newGraph=F)
A_all = tmpList[[1]]
n = tmpList[[2]]
M = tmpList[[3]]
rm(tmpList)
Abar = add(A_all)/M
AbarDiagAug = diag_aug(Abar)
eigenResult[[iData]] = eigen(AbarDiagAug)$values
yMax = max(eigenResult[[iData]])
yMin = min(eigenResult[[iData]])
df <- data.frame(eval=eigenResult[[iData]], k=1:n)
label_y <- with(df, .75*yMax+.25*yMin)
pp_hist[[iData]] <- ggplot(df, aes(x=eval))+
geom_histogram()+
xlab("eigenvalue") + ylab("count")+
theme(panel.grid.major = element_line(colour="grey95"),
panel.grid.minor = element_blank())+
theme(panel.background = element_rect(fill = 'white', colour = 'grey70'))+
theme(legend.position="none")+
ggtitle(dataNameDisplayVec[[iData]])
ggsave(paste0("../../Figure/hist_", dataName, ".pdf"),
pp_hist[[iData]]+theme(text=element_text(size=10,family="Times")),
width=2, height=2)
}
test1 <- function(xHat, cl) {
diffWithin <- c()
diffCross <- c()
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
if (cl[i] == cl[j]) {
# diffWithin <- c(diffWithin, norm(xHat[i, ] - xHat[j, ], "2")^2)
diffWithin <- c(diffWithin, norm(xHat[i, ] - xHat[j, ], "2"))
} else {
# diffCross <- c(diffCross, norm(xHat[i, ] - xHat[j, ], "2")^2)
diffCross <- c(diffCross, norm(xHat[i, ] - xHat[j, ], "2"))
}
}
}
return(mean(diffWithin) - mean(diffCross))
}
uniform_select <- function(tmpA) {
total <- sum(tmpA)
r <- sample.int(total, 1)
ind <- 1:((dim(tmpA)[1])^2)
ind <- ind[c(tmpA) == 1]
nVec <- ind[r] %% (dim(tmpA)[1])
nVec <- c((ind[r] - nVec)/(dim(tmpA)[1]), nVec)
if (nVec[2] > 0) {
nVec[1] = nVec[1] + 1
} else {
nVec[2] = dim(tmpA)[1]
}
return(list(nVec[2], nVec[1]))
}
setwd("/Users/Runze/Documents/GitHub/Dissertation/Code/R")
source("function_collection.R")
source("getElbows.R")
require(ggplot2)
load("~/Documents/GitHub/Dissertation/Result/violin_new2.RData")
pVec <- rep(0, length(switchVec))
for (i in 1:length(switchVec)) {
pfun <- ecdf(tVec[i, ])
pVec[i] <- pfun(t0)
}
pVec = round(pVec*100)/100
df <- data.frame(value=c(t(tVec)), flip=rep(switchVec, each=nIter))
df0 <- data.frame(yi = t0)
gg <- ggplot(data = df, aes(x=factor(flip), y=value))+
# ggplot(data = df, aes(x=factor(flip), y=value, fill=factor(flip)))+
# geom_violin(draw_quantiles = T, lty="blank", show.legend = FALSE)+
geom_violin(draw_quantiles = T, show.legend = FALSE)+
geom_hline(data = df0, aes(yintercept = yi, linetype = factor(yi)), show.legend = TRUE) +
scale_linetype_manual(name = "true lobe assignment", values = "dashed", labels = "") +
# guides(fill=guide_legend(title="number of flips"))+
guides(fill=FALSE)+
# scale_fill_discrete(labels = paste0(1:length(switchVec), ", p-value=", pVec))+
theme(legend.position="bottom")+
# geom_boxplot(aes(fill=factor(flip)), notch = T, width = 0.2)+
# stat_summary(fun.y=mean, geom="point", size=2, show.legend = F)+
# labs(title = paste0("dimension ", min(indDim), " to dimension ", max(indDim)),
#      x = "number of flips", y = "within lobes - cross lobes, 2-norm", fill = "")
annotate("text", x = 1:length(switchVec), y = -0.355, label = paste0("p=", pVec))+
labs(title = "", x = "number of flips", y = "T(X, l)", fill = "")
gg
ggsave(paste0("../../Figure/violinplot_new_flip_2norm_", min(indDim), "_", max(indDim), ".pdf"),
plot=gg+theme(text=element_text(size=10,family="Times")),
width=7, height=6)
rm(list = ls())
setwd("/Users/Runze/Documents/GitHub/Dissertation/Code/R")
lSize = .8
legendSize = 1.5
# dataName = "CPAC200"
dataName = "desikan"
# dataName = "JHU"
mVec = c(1, 5, 10)
library(ggplot2)
library(plyr)
library(dplyr)
library(reshape2)
fileName = paste("../../Result/result_", dataName, "_brute_fullrank1_",
"_eig_dim.RData", sep="")
load(fileName)
for (iM in 1:length(mVec)) {
m = mVec[iM]
fileName = paste("../../Result/result_", dataName, "_brute_fullrank1_",
"m_", m, "_eig.RData", sep="")
load(fileName)
if (iM == 1) {
errorAbarMean = array(0, dim=c(length(mVec), 1))
errorAbarLower = array(0, dim=c(length(mVec), 1))
errorAbarUpper = array(0, dim=c(length(mVec), 1))
errorPhatEIGMean = array(0, dim=c(length(mVec), n))
errorPhatEIGLower = array(0, dim=c(length(mVec), n))
errorPhatEIGUpper = array(0, dim=c(length(mVec), n))
}
error_A_bar = error_A_bar^2*n*(n-1)
error_P_hat = error_P_hat^2*n*(n-1)
errorAbarMean[iM] = mean(error_A_bar)
errorAbarLower[iM] = errorAbarMean[iM] - sqrt(var(error_A_bar))/sqrt(length(error_A_bar))*1.96
errorAbarUpper[iM] = errorAbarMean[iM] + sqrt(var(error_A_bar))/sqrt(length(error_A_bar))*1.96
errorPhatEIGMean[iM,] = rowMeans(error_P_hat)
errorPhatEIGLower[iM,] = errorPhatEIGMean[iM,] -
sqrt(apply(error_P_hat, 1, var))/sqrt(dim(error_P_hat)[2])*1.96
errorPhatEIGUpper[iM,] = errorPhatEIGMean[iM,] +
sqrt(apply(error_P_hat, 1, var))/sqrt(dim(error_P_hat)[2])*1.96
}
errorPhatUSVT = rep(0, length(mVec))
errorPhatZG = rep(0, length(mVec))
for (iM in 1:length(mVec)) {
x = dUSVTMean[iM]
x1 = floor(x)
y1 = errorPhatEIGMean[iM, x1]
x2 = ceiling(x)
y2 = errorPhatEIGMean[iM, x2]
errorPhatUSVT[iM] = (y2-y1)/(x2-x1)*(x-x1)+y1
x = dZGMean[iM]
x1 = floor(x)
y1 = errorPhatEIGMean[iM, x1]
x2 = ceiling(x)
y2 = errorPhatEIGMean[iM, x2]
errorPhatZG[iM] = (y2-y1)/(x2-x1)*(x-x1)+y1
}
error_by_dim_df <- rbind(
data.frame(mse=errorAbarMean,lci=errorAbarLower,uci=errorAbarUpper,
which="Abar",m=mVec,d=n),
data.frame(mse=errorAbarMean,lci=errorAbarLower,uci=errorAbarUpper,
which="Abar",m=mVec,d=2),
data.frame(mse=c(errorPhatEIGMean),lci=c(errorPhatEIGLower),uci=c(errorPhatEIGUpper),
which="Phat",m=rep(mVec,n),d=rep(1:n,each=3))) %>%
mutate(m=factor(paste0("m=",m),c("m=1","m=5","m=10")))
dim_selection_df <- rbind(
data.frame(mse=errorPhatZG,lci=errorPhatZG,uci=errorPhatZG,
which="ZG 3rd",m=mVec,d=dZGMean),
data.frame(mse=errorPhatUSVT,lci=errorPhatUSVT,uci=errorPhatUSVT,
which="USVT c=0.7",m=mVec,d=dUSVTMean)) %>%
mutate(m=factor(paste0("m=",m),c("m=1","m=5","m=10")))
label_y <- with(error_by_dim_df, .75*max(mse)+.25*min(mse))
gg <- ggplot(error_by_dim_df,aes(x=d,y=mse,linetype=factor(which),shape=factor(which)))+
facet_wrap(~m, nrow=1)+
geom_point(data=dim_selection_df,size=1.5)+
scale_linetype_manual(name="",values=c(1,2,0,0),
labels=c(expression(bar(A)), expression(hat(P)), "USVT c=0.7", "ZG 3rd"))+
scale_shape_manual(name="",values=c(-1,-1,15,17),
labels=c(expression(bar(A)), expression(hat(P)), "USVT c=0.7", "ZG 3rd"))+
geom_line()+
geom_linerange(aes(ymin=lci,ymax=uci),linetype=1,alpha=.5,size=.5)+
xlab("dimension")+ylab("MSE")+
theme(panel.grid.major = element_line(colour="grey95"),
panel.grid.minor = element_blank())+
theme(panel.background = element_rect(fill = 'white', colour = 'grey70'))+
theme(legend.position="bottom")+
ggtitle(paste0(dataName, ", n=", n))
gg <- ggplot(error_by_dim_df[error_by_dim_df$d>1,],
aes(x=d,y=mse,linetype=factor(which),shape=factor(which)))+
facet_wrap(~m)+
geom_point(data=dim_selection_df,size=1.5)+
scale_linetype_manual(name="",values=c(1,2,0,0),
labels=c(expression(bar(A)), expression(hat(P)), "USVT c=0.7", "ZG 3rd"))+
scale_shape_manual(name="",values=c(-1,-1,15,17),
labels=c(expression(bar(A)), expression(hat(P)), "USVT c=0.7", "ZG 3rd"))+
geom_line()+
# geom_linerange(aes(ymin=lci,ymax=uci),alpha=.5,size=1)+
xlab("dimension")+ylab("MSE")+
# theme(strip.text.x = element_text(size=20,face="bold"))+
# theme(axis.text=element_text(size=15),
#       axis.title=element_text(size=20,face="bold"))+
theme(panel.grid.major = element_line(colour="grey95"),
panel.grid.minor = element_blank())+
theme(panel.background = element_rect(fill = 'white', colour = 'grey70'))+
# theme(legend.text=element_text(size=20,face="bold"))+
theme(legend.position="bottom")+
# ggtitle(paste0("Simulation based on ", dataName, ", N=", n, ", M=", m))+
# theme(legend.key.size=unit(legendSize,"line"))+
# theme(plot.title=element_text(lineheight=.8,size=20,face="bold"))
print(gg)
gg
rm(list = ls())
setwd("/Users/Runze/Documents/GitHub/Dissertation/Code/R")
lSize = .8
legendSize = 1.5
# dataName = "CPAC200"
dataName = "desikan"
# dataName = "JHU"
mVec = c(1, 5, 10)
library(ggplot2)
library(plyr)
library(dplyr)
library(reshape2)
fileName = paste("../../Result/result_", dataName, "_brute_fullrank1_",
"_eig_dim.RData", sep="")
load(fileName)
for (iM in 1:length(mVec)) {
m = mVec[iM]
fileName = paste("../../Result/result_", dataName, "_brute_fullrank1_",
"m_", m, "_eig.RData", sep="")
load(fileName)
if (iM == 1) {
errorAbarMean = array(0, dim=c(length(mVec), 1))
errorAbarLower = array(0, dim=c(length(mVec), 1))
errorAbarUpper = array(0, dim=c(length(mVec), 1))
errorPhatEIGMean = array(0, dim=c(length(mVec), n))
errorPhatEIGLower = array(0, dim=c(length(mVec), n))
errorPhatEIGUpper = array(0, dim=c(length(mVec), n))
}
error_A_bar = error_A_bar^2*n*(n-1)
error_P_hat = error_P_hat^2*n*(n-1)
errorAbarMean[iM] = mean(error_A_bar)
errorAbarLower[iM] = errorAbarMean[iM] - sqrt(var(error_A_bar))/sqrt(length(error_A_bar))*1.96
errorAbarUpper[iM] = errorAbarMean[iM] + sqrt(var(error_A_bar))/sqrt(length(error_A_bar))*1.96
errorPhatEIGMean[iM,] = rowMeans(error_P_hat)
errorPhatEIGLower[iM,] = errorPhatEIGMean[iM,] -
sqrt(apply(error_P_hat, 1, var))/sqrt(dim(error_P_hat)[2])*1.96
errorPhatEIGUpper[iM,] = errorPhatEIGMean[iM,] +
sqrt(apply(error_P_hat, 1, var))/sqrt(dim(error_P_hat)[2])*1.96
}
errorPhatUSVT = rep(0, length(mVec))
errorPhatZG = rep(0, length(mVec))
for (iM in 1:length(mVec)) {
x = dUSVTMean[iM]
x1 = floor(x)
y1 = errorPhatEIGMean[iM, x1]
x2 = ceiling(x)
y2 = errorPhatEIGMean[iM, x2]
errorPhatUSVT[iM] = (y2-y1)/(x2-x1)*(x-x1)+y1
x = dZGMean[iM]
x1 = floor(x)
y1 = errorPhatEIGMean[iM, x1]
x2 = ceiling(x)
y2 = errorPhatEIGMean[iM, x2]
errorPhatZG[iM] = (y2-y1)/(x2-x1)*(x-x1)+y1
}
error_by_dim_df <- rbind(
data.frame(mse=errorAbarMean,lci=errorAbarLower,uci=errorAbarUpper,
which="Abar",m=mVec,d=n),
data.frame(mse=errorAbarMean,lci=errorAbarLower,uci=errorAbarUpper,
which="Abar",m=mVec,d=2),
data.frame(mse=c(errorPhatEIGMean),lci=c(errorPhatEIGLower),uci=c(errorPhatEIGUpper),
which="Phat",m=rep(mVec,n),d=rep(1:n,each=3))) %>%
mutate(m=factor(paste0("m=",m),c("m=1","m=5","m=10")))
dim_selection_df <- rbind(
data.frame(mse=errorPhatZG,lci=errorPhatZG,uci=errorPhatZG,
which="ZG 3rd",m=mVec,d=dZGMean),
data.frame(mse=errorPhatUSVT,lci=errorPhatUSVT,uci=errorPhatUSVT,
which="USVT c=0.7",m=mVec,d=dUSVTMean)) %>%
mutate(m=factor(paste0("m=",m),c("m=1","m=5","m=10")))
label_y <- with(error_by_dim_df, .75*max(mse)+.25*min(mse))
gg <- ggplot(error_by_dim_df,aes(x=d,y=mse,linetype=factor(which),shape=factor(which)))+
facet_wrap(~m, nrow=1)+
geom_point(data=dim_selection_df,size=1.5)+
scale_linetype_manual(name="",values=c(1,2,0,0),
labels=c(expression(bar(A)), expression(hat(P)), "USVT c=0.7", "ZG 3rd"))+
scale_shape_manual(name="",values=c(-1,-1,15,17),
labels=c(expression(bar(A)), expression(hat(P)), "USVT c=0.7", "ZG 3rd"))+
geom_line()+
geom_linerange(aes(ymin=lci,ymax=uci),linetype=1,alpha=.5,size=.5)+
xlab("dimension")+ylab("MSE")+
theme(panel.grid.major = element_line(colour="grey95"),
panel.grid.minor = element_blank())+
theme(panel.background = element_rect(fill = 'white', colour = 'grey70'))+
theme(legend.position="bottom")+
ggtitle(paste0(dataName, ", n=", n))
gg <- ggplot(error_by_dim_df[error_by_dim_df$d>1,],
aes(x=d,y=mse,linetype=factor(which),shape=factor(which)))+
facet_wrap(~m)+
geom_point(data=dim_selection_df,size=1.5)+
scale_linetype_manual(name="",values=c(1,2,0,0),
labels=c(expression(bar(A)), expression(hat(P)), "USVT c=0.7", "ZG 3rd"))+
scale_shape_manual(name="",values=c(-1,-1,15,17),
labels=c(expression(bar(A)), expression(hat(P)), "USVT c=0.7", "ZG 3rd"))+
geom_line()+
# geom_linerange(aes(ymin=lci,ymax=uci),alpha=.5,size=1)+
xlab("dimension")+ylab("MSE")+
# theme(strip.text.x = element_text(size=20,face="bold"))+
# theme(axis.text=element_text(size=15),
#       axis.title=element_text(size=20,face="bold"))+
theme(panel.grid.major = element_line(colour="grey95"),
panel.grid.minor = element_blank())+
theme(panel.background = element_rect(fill = 'white', colour = 'grey70'))+
# theme(legend.text=element_text(size=20,face="bold"))+
theme(legend.position="bottom")+
# ggtitle(paste0("Simulation based on ", dataName, ", N=", n, ", M=", m))+
# theme(legend.key.size=unit(legendSize,"line"))+
# theme(plot.title=element_text(lineheight=.8,size=20,face="bold"))
print(gg)
ggsave("../../Figure/sim_desikan.pdf",
plot=gg+theme(text=element_text(size=10,family="Times")),
width=5.5,height=2.5)
